- GambolPutty:
  default_pool_size: 2
  default_queue_size: 10

- module: RedisClient
  server: es-01.dbap.de

- module: TcpServerTornado
  port: 5152
  tls: False
  key: /opt/dev/src/exampleData/gambolputty_ca.key
  cert: /opt/dev/src/exampleData/gambolputty_ca.crt
  receivers:
    - TrackEvents

- module: TrackEvents
  pool_size: 3
  queue_size: 3
  redis_client: RedisClient
  receivers:
    - RegexParser

# Parse the messege using named regex patterns.
# The named groups will be put into corresponding fields in the data dictionary
- module: RegexParser
  source_field: data
  field_extraction_patterns:
    httpd_access_log: '(?P<log_timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<host>[\w\-\._]+)\s+(apache2|nginx): httpd\[(?P<pid>\d+)\]\s+(?P<virtual_host_name>.*)\s+(?P<remote_ip>\d+\.\d+\.\d+\.\d+)\s+(?P<request_time>[\d\.]+)\s+\"(?P<http_method>GET|POST)\s+(?P<uri>.*) HTTP/.*?\"\s+(?P<http_status>-|\d+)\s+(?P<bytes_sent>-|\d+)\s+(?P<cookie_sid>\S+)\s+(?P<cookie_unique_id>\S+)\s+\"(?P<referer>.*)\"\s+\"(?P<user_agent>.*)\"'
    agora_access_log: '(?P<log_timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<host>[\w\._\-]+)\s+nginx: agora (?P<request_ts>\d+\.\d+).*\s(?P<server_name>[\w\._\-]+)\s(?P<http_method>[\w\-]+)\s\"(?P<uri>.*)\"\s\"(?P<request_body>.*)\"\s(?P<username>[\w\-]+)\s(?P<http_status>\d+)\s(?P<bytes_sent>\d+)\s(?P<request_size>\d+)\s(?P<request_time>[\d\.]+)\s(?P<remote_ip>[\d\.]+)\s(?P<remote_port>\d+)\s\"(?P<x_forwarded_for>.*)\"\s\"(?P<referer>.*)\"\s\"(?P<user_agent>.*)\"\s(?P<cache_status>[\w\-]+)\s\"(?P<upstream_response_time>.*)\"\s\"(?P<upstream_addr>.*)\"\s\"(?P<content_type>.*)\"\s\"(?P<accept_encoding>.*)\"\s\"(?P<content_encoding>.*)\"\s\"(?P<custom_vars>.*)'
    httpd_log_phperrors: '(?P<log_timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<host>[\w\-\._]+)\s+httpd\[(?P<pid>\d+)\]:?\s(\[(?P<status>\w+)\]\s+)?\[client\s+(?P<remote_ip>\d+\.\d+\.\d+\.\d+)\]\s+PHP (?P<php_error_type>Warning|Notice|Fatal error):\s+(?P<php_error_message>.*)'
    php_fpm_log_errors: '(?P<log_timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<host>[\w\-\._]+)\s+php-fpm\[(?P<pid>\d+)\]:?\s\[(?P<php_error_type>\w+)\]\s+\[pool\s(?P<php_fpm_poolname>[\w\-\._\s]+)\]\s+(?P<php_error_message>.*)'
    httpd_log_errors: '(?P<log_timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<host>[\w\-\._]+)\s+httpd\[(?P<pid>\d+)\]:?\s\[(?P<status>\w+)\]\s+\[client\s+(?P<remote_ip>\d+\.\d+\.\d+\.\d+)\]\s+(?P<httpd_error_message>.*)'
    webservice_access_log: '(?P<log_timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<host>[\w\-\._]+)\s+daemontools\.(?P<service_name>\w+):.*\t(?P<remote_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s-\s\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+\d+\s+(?P<http_method>\w+)\s+(?P<uri>/\sVersion.*)\s+(?P<http_status>\d{1,3})\s+(?P<bytes_sent>-|\d+)\s+-\s+(?P<request_time>\d+)\t(?P<user_agent>.*)\t(?P<referer>.*)'
    flow_digest_log: '(?P<log_timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<host>[\w\-\._]+)\s+flow-digest:\sSource:(?P<remote_ip>\d+\.\d+\.\d+\.\d+)\sDestination:(?P<destination_ip>\d+\.\d+\.\d+\.\d+)\sFlowCount:(?P<flow_count>\d+)\sOctets:(?P<octets>\d+)\sPackets:(?P<packets>\d+)\sBlockThreshold:(?P<block_threshold>\d+)\sBlockStatus:(?P<block_status>\w+)'
    iptables: '(?P<log_timestamp>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<host>[\w\-\._]+)\s+kernel:.*?\ iptables\ (?P<iptables_action>.*?)\ :\ IN=(?P<iptables_in_int>.*?)\ OUT=(?P<iptables_out_int>.*?)\ SRC=(?P<iptables_src>.*?)\ DST=(?P<iptables_dst>.*?)\ LEN=(?P<iptables_len>.*?)\ .*?PROTO=(?P<iptables_proto>.*?)\ SPT=(?P<iptables_spt>.*?)\ DPT=(?P<iptables_dpt>.*?)\ WINDOW=.*'
  receivers:
    - AddDateTime

# Add a timestamp field.
- module: AddDateTime
  format: '%Y-%m-%dT%H:%M:%S.%f'
  target_field: "@timestamp"
  receivers:
    - AddGeoInfo

# Add geo info based on the lookup_fields. The first field in <source_fields> that yields a result from geoip will be used.
- module: AddGeoInfo
  #geoip_dat_path: /opt/dev/src/exampleData/GeoIP.dat
  geoip_dat_path: ../exampleData/GeoIP.dat
  source_fields: [x_forwarded_for, remote_ip]
  receivers:
    - CastToInteger

# Cast fields in <source_fields> to type integer.
- module: ModifyFields
  alias: CastToInteger
  action: castToInteger
  source_fields: [http_status, bytes_sent, pid, remote_port, request_time, request_size, TreeNodeID]
  receivers:
    - CastToFloat

# Cast fields in <source_fields> to type float.
- module: ModifyFields
  alias: CastToFloat
  action: castToFloat
  source_fields: [upstream_response_time]
  receivers:
    - Statistics
    - ElasticSearchSink:
        filter: not http_status
    - MapHttpStatus:
        filter: http_status

# Map field values of <source_field> to values in <map>.
- module: ModifyFields
  alias: MapHttpStatus
  action: map
  source_field: http_status
  map: {100: 'Continue', 200: 'OK', 301: 'Moved Permanently', 302: 'Found', 304: 'Not Modified', 400: 'Bad Request', 401: 'Unauthorized', 403: 'Forbidden', 404: 'Not Found', 500: 'Internal Server Error', 502: 'Bad Gateway'}
  receivers:
    - ElasticSearchSink
    - MapServerName:
        filter: event_type == 'httpd_access_log'
    - UrlParser:
        filter: event_type == 'agora_access_log'

# Map field values of <source_field> to values in <map>.
- module: ModifyFields
  alias: MapServerName
  action: map
  source_field: virtual_host_name
  map: {'www.titus.de': 'dbap-titus.dstore.de'}
  target_field: server_name
  receivers:
    - MapAccessKeyID

- module: ModifyFields
  alias: MapAccessKeyID
  action: map
  source_field: virtual_host_name
  map: {'www.titus.de': 'E9GADFFDE467'}
  target_field: AccessKeyID
  receivers:
    - UrlParser

# Extract query parameters
- module: UrlParser
  source_field: uri
  receivers:
    - HttpRequest

# Execute an http request and store result in <target_field>.
- module: HttpRequest
  pool_size: 2
  url: http://%(server_name)s/%(AccessKeyID)s/?Version=200812&AccessKeyID=%(AccessKeyID)s&Operation=GetItems&TreeNodeID=%(TreeNodeID)s&Template=ProductsWithoutUsedValues
  target_field: agora_product_xml
  redis_client: RedisClient
  redis_key: "%(server_name)s:AgoraRequests:%(TreeNodeID)s"
  redis_ttl: 3600
  receivers:
    - XPathParser

# Parse an xml string via xpath and store result in <target_field>.
- module: XPathParser
  source_field: agora_product_xml
  query: "//Item[1]/@NodeDescription"
  redis_client: RedisClient
  redis_key: "%(server_name)s:XPathQueries:%(TreeNodeID)s"
  redis_ttl: 3600
  target_field: TreeNodeID_mapped
  receivers:
    - DeleteUnnecessaryFields

# Discard fields no longer needed.
- module: ModifyFields
  alias: DeleteUnnecessaryFields
  action: keep
  source_fields: [ "@timestamp", received_from, remote_ip, event_type, server_name, virtual_host_name, cache_status, http_status_mapped, bytes_sent, data, host, upstream_response_time, Version, Operation, Artikelnummer, Template, TreeNodeID, TreeNodeID_mapped, XSLTs, Search, screen, ClassName, task, virtual_host_name ]
  receivers:
    - Agora-ES
    - Facet:
        filter: event_type == 'agora_access_log' and TreeNodeID != "" and server_name != ""

# Collect unique terms found in <source_field> grouped by <group_by>.
- module: Facet
  source_field: TreeNodeID
  group_by: "%(server_name)s:%(remote_ip)s"
  add_event_fields: [server_name, TreeNodeID_mapped]
  interval: 600
  redis_client: RedisClient
  redis_ttl: 60
  receivers:
    - PermutateFacets:
        filter: event_type == 'facet' and len(facets) > 1

# Emit new events with all permutations of <source_field>.
- module: Permutate
  alias: PermutateFacets
  source_field: facets
  target_fields: ['product', 'purchased_with']
  context_data_field: other_event_fields
  context_target_mapping: {'TreeNodeID_mapped': ['product_name', 'purchased_with_name'], 'server_name': ['virtual_host_name_1', 'virtual_host_name_2']}
  receivers:
    - DeleteUnnecessaryFacetFields

# Discard fields no longer needed.
- module: ModifyFields
  alias: DeleteUnnecessaryFacetFields
  action: keep
  source_fields: ['event_type', 'received_from', 'product', 'product_name', 'purchased_with', 'purchased_with_name', 'virtual_host_name_1', 'virtual_host_name_2']
  receivers:
    - ESProductRecommendations

- module: ElasticSearchSink
  nodes: ["es-01.dbap.de:9200"]
  #index_name: 1perftests
  doc_id: '%(@timestamp)s%(received_from)s'
  store_interval_in_secs: 2

# Add messages to ES
- module: ElasticSearchSink
  alias: Agora-ES
  nodes: ["es-01.dbap.de:9200"]
  #index_name: 2perftests
  index_prefix: agora_access-
  doc_id: '%(@timestamp)s%(received_from)s'
  store_interval_in_secs: 2

# Add messages to ES
- module: ElasticSearchSink
  alias: ESProductRecommendations
  nodes: ["es-01.dbap.de:9200"]
  #index_name: 3perftests
  index_prefix: recommendations-
  doc_id: '%(virtual_host_name_1)s%(product)s%(purchased_with)s'
  store_interval_in_secs: 10

- module: Statistics
#- module: StdOutSink